name: Build React Native iOS (Signed, Upload IPA)

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-ios:
    name: Build iOS Release (Signed)
    runs-on: macos-latest
    env:
      USE_HERMES: "1"
      RCT_NO_LAUNCH_PACKAGER: "true"

    steps:
      # -------------------------
      # 1Ô∏è‚É£ Checkout repo
      # -------------------------
      - name: üß© Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # -------------------------
      # 2Ô∏è‚É£ Node & Yarn setup
      # -------------------------
      - name: ‚öôÔ∏è Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      # -------------------------
      # Cache npm & node_modules
      # -------------------------
      - name: üì¶ Cache node_modules & npm
        uses: actions/cache@v3
        with:
          path: |
            ~/.npm
            nvRNSDKLiveAccountTestApp/node_modules
          key: node-${{ runner.os }}-npm-${{ hashFiles('nvRNSDKLiveAccountTestApp/package-lock.json') }}
          restore-keys: |
            node-${{ runner.os }}-npm-

      # -------------------------
      # Debug: Print current directory and files
      # -------------------------
      - name: üìÇ Print current directory
        run: |
          echo "Current working directory:"
          pwd
          echo "Listing files:"
          ls -la
          echo "Listing root contents:"
          ls -la ..

      # -------------------------
      # Install JS dependencies
      # -------------------------
      - name: üì¶ Install JS dependencies
        run: |
          npm ci --legacy-peer-deps

      # -------------------------
      # Prepare iOS dependencies (Pods + Hermes Fix)
      # -------------------------
      - name: Prepare iOS dependencies
        run: |
          echo "üßπ Cleaning old caches and builds..."
          rm -rf ~/Library/Developer/Xcode/DerivedData ios/build ios/Pods

          echo "üì¶ Installing iOS Pods..."
          cd ios
          pod install --repo-update

          echo "üß© Fixing Hermes script permissions..."
          find Pods -type f -name "Script-*.sh" -exec chmod +x {} \;

          # CI-safe: Disable dependency analysis for RN bundle phase
          sed -i '' 's/"basedOnDependencyAnalysis" = YES;/"basedOnDependencyAnalysis" = NO;/g' nvRNSDKLiveAccountTestApp.xcodeproj/project.pbxproj
          cd ..
 
   
      # -------------------------
      # 5Ô∏è‚É£ Decrypt signing assets
      # -------------------------
      - name: üîê Decrypt signing assets
        env:
          CERT_PASSWORD: ${{ secrets.CERT_PASSWORD }}
        run: |
          set -e
          mkdir -p ios/certs
          openssl aes-256-cbc -k "$CERT_PASSWORD" -in pf_ios/appleDistribution.p12.enc -out ios/certs/appleDistribution.p12 -d
          openssl aes-256-cbc -k "$CERT_PASSWORD" -in pf_ios/main_Target_release.mobileprovision.enc -out ios/certs/main_Target_release.mobileprovision -d
          openssl aes-256-cbc -k "$CERT_PASSWORD" -in pf_ios/ext_Target_release.mobileprovision.enc -out ios/certs/ext_Target_release.mobileprovision -d

      # -------------------------
      # 6Ô∏è‚É£ Keychain & certificate
      # -------------------------
      - name: üîë Create keychain and import certificate
        env:
          CERT_PASSWORD: ${{ secrets.CERT_PASSWORD }}
        run: |
          set -e
          KEYCHAIN_NAME=build.keychain
          security create-keychain -p "" "$KEYCHAIN_NAME"
          security import ios/certs/appleDistribution.p12 -k ~/Library/Keychains/$KEYCHAIN_NAME -P "$CERT_PASSWORD" -T /usr/bin/codesign
          security list-keychains -s ~/Library/Keychains/$KEYCHAIN_NAME
          security default-keychain -s ~/Library/Keychains/$KEYCHAIN_NAME
          security unlock-keychain -p "" ~/Library/Keychains/$KEYCHAIN_NAME
          security set-key-partition-list -S apple-tool:,apple: -s -k "" ~/Library/Keychains/$KEYCHAIN_NAME

      # -------------------------
      # 7Ô∏è‚É£ Install Provisioning Profiles
      # -------------------------
      - name: üìÑ Install Provisioning Profiles
        run: |
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp ios/certs/main_Target_release.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/
          cp ios/certs/ext_Target_release.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/

      # -------------------------
      # 8Ô∏è‚É£ Bundle React Native JS
      # -------------------------
      - name: üì¶ Bundle React Native JS
        run: |
          npx react-native bundle \
            --entry-file index.js \
            --platform ios \
            --dev false \
            --bundle-output ios/main.jsbundle \
            --assets-dest ios

      # -------------------------
      # 9Ô∏è‚É£ Install xcpretty
      # -------------------------
      - name: üíé Install xcpretty
        run: gem install xcpretty

      # -------------------------
      # üîü Build & Archive iOS App
      # -------------------------
      - name: üèóÔ∏è Build & Archive iOS App (Signed)
        env:
          APP_SCHEME: nvRNSDKLiveAccountTestApp
          WORKSPACE: nvRNSDKLiveAccountTestApp.xcworkspace
          CONFIGURATION: Release
          DEVELOPMENT_TEAM: 4JW4924F8P
          PROFILE_APP_NAME: "nvRNLiveAcTestAppMainTargetReleaseDistribProfile"
          PROFILE_EXT_NAME: "nvRNLiveAcTestAppServicExtTargetReleaseDistProfile"
          CI: "true"
          NO_FLIPPER: "1"
          RCT_NO_LAUNCH_PACKAGER: "true"
        run: |
          set -e
          cd ios
          mkdir -p build

          # Fix dependency analysis
          find . -name "project.pbxproj" -exec sed -i '' 's/"basedOnDependencyAnalysis" = YES;/"basedOnDependencyAnalysis" = NO;/g' {} \; || true

          # ExportOptions.plist
          cat > ExportOptions.plist <<EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
            <key>method</key>
            <string>app-store</string>
            <key>teamID</key>
            <string>${DEVELOPMENT_TEAM}</string>
            <key>signingStyle</key>
            <string>manual</string>
            <key>compileBitcode</key>
            <false/>
            <key>stripSwiftSymbols</key>
            <true/>
            <key>destination</key>
            <string>export</string>
            <key>thinning</key>
            <string>&lt;none&gt;</string>
            <key>provisioningProfiles</key>
            <dict>
              <key>com.notifyvisitors.rn.nvrnsdkliveaccounttestapp</key>
              <string>${PROFILE_APP_NAME}</string>
              <key>com.notifyvisitors.rn.nvrnsdkliveaccounttestapp.NVRNPushServiceExt</key>
              <string>${PROFILE_EXT_NAME}</string>
            </dict>
          </dict>
          </plist>
          EOF

          # Clean previous builds
          echo "üßπ Cleaning previous build"
          xcodebuild clean -workspace "$WORKSPACE" -scheme "$APP_SCHEME" -configuration "$CONFIGURATION"

          # Archive
          echo "üì¶ Archiving app (CI optimized)"
          ARCHIVE_PATH="$PWD/build/${APP_SCHEME}.xcarchive"
          set -o pipefail
          xcodebuild -workspace "$WORKSPACE" \
            -scheme "$APP_SCHEME" \
            -configuration "$CONFIGURATION" \
            -sdk iphoneos \
            -archivePath "$ARCHIVE_PATH" \
            DEVELOPMENT_TEAM="${DEVELOPMENT_TEAM}" \
            CODE_SIGN_STYLE=Manual \
            CODE_SIGN_IDENTITY="iPhone Distribution" \
            PROVISIONING_PROFILE_SPECIFIER="${PROFILE_APP_NAME}" \
            CODE_SIGNING_ALLOWED=NO \
            archive | xcpretty

          # Export signed IPA
          xcodebuild -exportArchive \
            -archivePath "$ARCHIVE_PATH" \
            -exportPath "$PWD/build" \
            -exportOptionsPlist ExportOptions.plist | xcpretty

          echo "IPA files:"
          ls -la build/*.ipa || true
          cd ..

      # -------------------------
      # 1Ô∏è‚É£1Ô∏è‚É£ Upload IPA Artifact
      # -------------------------
      - name: ‚òÅÔ∏è Upload iOS IPA Artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-release-ios
          path: ios/build/*.ipa
