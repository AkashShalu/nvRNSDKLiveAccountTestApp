name: iOS CI - Build

on:
  push:
    branches: [ main ]
    paths:
      - 'ios/**'
      - 'pf_ios/**'
      - 'src/**'
      - 'package.json'
      - 'package-lock.json'
      - 'app.json'
      - 'index.js'
      - 'App.tsx'
      - 'babel.config.js'
      - 'tsconfig.json'
      - '.github/workflows/ios.yml'
  
  pull_request:
    branches: [ main ]
    paths:
      - 'ios/**'
      - 'pf_ios/**'
      - 'src/**'
      - 'package.json'
      - 'package-lock.json'
      - 'app.json'
      - 'index.js'
      - 'App.tsx'
      - 'babel.config.js'
      - 'tsconfig.json'
      - '.github/workflows/ios.yml'

jobs:
  build-ios:
    name: üß± Build iOS (AdHoc)
    runs-on: macos-latest

    env:
      # üß© Global build environment
      CI: true
      USE_HERMES: "1"
      RCT_NO_LAUNCH_PACKAGER: "true"
      NO_FLIPPER: "1"

      # üì± Xcode configuration
      APP_SCHEME: nvRNSDKLiveAccountTestApp
      WORKSPACE: nvRNSDKLiveAccountTestApp.xcworkspace
      CONFIGURATION: ad_hoc
      DEVELOPMENT_TEAM: 4JW4924F8P
      PROFILE_APP_NAME: nvRNLiveAcTestAppMainTargetAdHocDistribProfile
      PROFILE_EXT_NAME: nvRNLiveAcTestAppServExtTargetAdHocDistribProfile

    steps:
      # -------------------------
      # 1Ô∏è‚É£ Checkout
      # -------------------------
      - name: üß© Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # -------------------------
      # 2Ô∏è‚É£ Node.js Setup
      # -------------------------
      - name: ‚öôÔ∏è Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      # -------------------------
      # 3Ô∏è‚É£ Cache Dependencies
      # -------------------------
      - name: üì¶ Cache npm & node_modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.npm
            nvRNSDKLiveAccountTestApp/node_modules
          key: node-${{ runner.os }}-${{ hashFiles('nvRNSDKLiveAccountTestApp/package-lock.json') }}
          restore-keys: |
            node-${{ runner.os }}-

      # -------------------------
      # 4Ô∏è‚É£ Install JS Dependencies
      # -------------------------
      - name: üì¶ Install JS Dependencies
        run: npm ci --legacy-peer-deps

      # ----------------------------
      # 5Ô∏è‚É£ Prepare iOS Dependencies
      # ----------------------------
      - name: üß∞ Prepare iOS Dependencies (Pods & Fixes)
        run: |
          echo "üßπ Cleaning old builds..."
          rm -rf ~/Library/Developer/Xcode/DerivedData ios/build ios/Pods

          echo "üì¶ Installing iOS Pods..."
          cd ios
          pod install --repo-update

          echo "üîß Fixing Hermes & CocoaPods permissions..."
          find Pods -type f -name "Script-*.sh" -exec chmod +x {} \;
          chmod +x Pods/Target\ Support\ Files/Pods-*/Pods-*-frameworks.sh || true
          chmod +x Pods/Target\ Support\ Files/Pods-*/Pods-*-resources.sh || true

          echo "üö´ Disabling dependency analysis..."
          sed -i '' 's/"basedOnDependencyAnalysis" = YES;/"basedOnDependencyAnalysis" = NO;/g' \
            nvRNSDKLiveAccountTestApp.xcodeproj/project.pbxproj
          cd ..

      # -------------------------
      # 6Ô∏è‚É£ Decrypt Signing Assets
      # -------------------------
      - name: üîê Decrypt Signing Assets
        env:
          CERT_PASSWORD: ${{ secrets.CERT_PASSWORD }}
        run: |
          mkdir -p ios/certs
          for FILE in appleDistribution.p12 main_Target_ad_hoc.mobileprovision ext_Target_ad_hoc.mobileprovision; do
            echo "üîì Decrypting $FILE..."
            openssl aes-256-cbc -k "$CERT_PASSWORD" \
              -in "pf_ios/${FILE}.enc" -out "ios/certs/${FILE}" -d
          done

      # -------------------------
      # 7Ô∏è‚É£ Configure Keychain & Import Certificate
      # -------------------------
      - name: üîë Setup Keychain & Import Certificate
        env:
          CERT_PASSWORD: ${{ secrets.CERT_PASSWORD }}
        run: |
          KEYCHAIN_NAME=build.keychain
          security create-keychain -p "$CERT_PASSWORD" "$KEYCHAIN_NAME"
          security set-keychain-settings -lut 3600 "$KEYCHAIN_NAME"
          security list-keychains -s "$KEYCHAIN_NAME"
          security default-keychain -s "$KEYCHAIN_NAME"
          security unlock-keychain -p "$CERT_PASSWORD" "$KEYCHAIN_NAME"

          echo "üì• Importing Distribution Certificate..."
          security import ios/certs/appleDistribution.p12 -k "$KEYCHAIN_NAME" -P "$CERT_PASSWORD" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple: -s -k "$CERT_PASSWORD" "$KEYCHAIN_NAME"

      # -------------------------
      # 8Ô∏è‚É£ Install Provisioning Profiles
      # -------------------------
      - name: üìÑ Install Provisioning Profiles
        run: |
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp ios/certs/*.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/
          ls -la ~/Library/MobileDevice/Provisioning\ Profiles

      # -------------------------
      # 9Ô∏è‚É£ Bundle React Native JS
      # -------------------------
      - name: üì¶ Bundle React Native JS
        run: |
          npx react-native bundle \
            --entry-file index.js \
            --platform ios \
            --dev false \
            --bundle-output ios/main.jsbundle \
            --assets-dest ios

      # -------------------------
      # üîü Install xcpretty
      # -------------------------
      - name: üíé Install xcpretty
        run: gem install xcpretty

      # -------------------------
      # 1Ô∏è‚É£1Ô∏è‚É£ Build & Archive App
      # -------------------------
      - name: üèóÔ∏è Build & Archive iOS App (AdHoc)
        run: |
          cd ios
          mkdir -p build

          echo "üßπ Cleaning previous build..."
          xcodebuild clean -workspace "$WORKSPACE" -scheme "$APP_SCHEME" -configuration "$CONFIGURATION"

          echo "üì• Copying and Generating ExportOptions.plist from pf_ios..."
          cp ../pf_ios/ExportOptions.plist ExportOptions.plist

          echo "üì¶ Archiving app..."
          ARCHIVE_PATH="$PWD/build/${APP_SCHEME}.xcarchive"

          xcodebuild -workspace "$WORKSPACE" \
            -scheme "$APP_SCHEME" \
            -configuration "$CONFIGURATION" \
            -sdk iphoneos \
            -archivePath "$ARCHIVE_PATH" \
            DEVELOPMENT_TEAM="$DEVELOPMENT_TEAM" \
            CODE_SIGN_STYLE=Manual \
            CODE_SIGN_IDENTITY="Apple Distribution" \
            -allowProvisioningUpdates \
            archive | xcpretty

          echo "üì¶ Exporting .ipa..."
          xcodebuild -exportArchive \
            -archivePath "$ARCHIVE_PATH" \
            -exportPath "$PWD/build" \
            -exportOptionsPlist ExportOptions.plist \
            -allowProvisioningUpdates \
            -verbose | tee export.log

          ls -la build/*.ipa || echo "‚ùå No IPA found!"
          cd ..

      # -------------------------
      # 1Ô∏è‚É£2Ô∏è‚É£ Upload Artifacts
      # -------------------------
      - name: ‚òÅÔ∏è Upload iOS IPA Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ios-adhoc-build
          path: ios/build/*.ipa
