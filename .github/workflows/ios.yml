name: iOS CI - Build

on:
  push:
    branches: [ stage ]
    paths:
      - 'ios/**'
      - 'pf_ios/**'
      - 'src/**'
      - 'package.json'
      - 'package-lock.json'
      - 'app.json'
      - 'index.js'
      - 'App.tsx'
      - 'babel.config.js'
      - 'tsconfig.json'
  
  pull_request:
    branches: [ stage ]
    paths:
      - 'ios/**'
      - 'pf_ios/**'
      - 'src/**'
      - 'package.json'
      - 'package-lock.json'
      - 'app.json'
      - 'index.js'
      - 'App.tsx'
      - 'babel.config.js'
      - 'tsconfig.json'

jobs:
  build-ios:
    name: Build iOS ad_hoc (Signed - AdHoc)
    runs-on: macos-latest
    env:
      # RN / CI flags
      USE_HERMES: "1"
      RCT_NO_LAUNCH_PACKAGER: "true"
      NO_FLIPPER: "1"
      CI: "true"
     
    steps:
      # -------------------------
      # 1️⃣ Checkout repo
      # -------------------------
      - name: 🧩 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # -------------------------
      # 2️⃣ Node & Yarn setup
      # -------------------------
      - name: ⚙️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      # -------------------------
      # Cache npm & node_modules
      # -------------------------
      - name: 📦 Cache node_modules & npm
        uses: actions/cache@v3
        with:
          path: |
            ~/.npm
            nvRNSDKLiveAccountTestApp/node_modules
          key: node-${{ runner.os }}-npm-${{ hashFiles('nvRNSDKLiveAccountTestApp/package-lock.json') }}
          restore-keys: |
            node-${{ runner.os }}-npm-
      # -------------------------
      # Debug: Print current directory and files
      # -------------------------
      - name: 📂 Print current directory
        run: |
          echo "Current working directory:"
          pwd
          echo "Listing files:"
          ls -la
          echo "Listing root contents:"
          ls -la ..
      # -------------------------
      # Install JS dependencies
      # -------------------------
      - name: 📦 Install JS dependencies
        run: |
          npm ci --legacy-peer-deps
      # -------------------------
      # Prepare iOS dependencies (Pods + Hermes Fix)
      # -------------------------
      - name: Prepare iOS dependencies
        run: |
          echo "🧹 Cleaning old caches and builds..."
          rm -rf ~/Library/Developer/Xcode/DerivedData ios/build ios/Pods
          echo "📦 Installing iOS Pods..."
          cd ios
          pod install --repo-update
          
          echo "🧩 Fixing Hermes script permissions..."
          find Pods -type f -name "Script-*.sh" -exec chmod +x {} \;
          chmod +x Pods/Target\ Support\ Files/Pods-*/Pods-*-frameworks.sh || true
          chmod +x Pods/Target\ Support\ Files/Pods-*/Pods-*-resources.sh || true

          # CI-safe: Disable dependency analysis for RN bundle phase
          sed -i '' 's/"basedOnDependencyAnalysis" = YES;/"basedOnDependencyAnalysis" = NO;/g' nvRNSDKLiveAccountTestApp.xcodeproj/project.pbxproj
          
          cd ..

      # -------------------------
      # 5️⃣ Decrypt signing assets
      # -------------------------
      - name: 🔐 Decrypt signing assets
        env:
          CERT_PASSWORD: ${{ secrets.CERT_PASSWORD }}
        run: |
          set -e
          mkdir -p ios/certs
          openssl aes-256-cbc -k "$CERT_PASSWORD" -in pf_ios/appleDistribution.p12.enc -out ios/certs/appleDistribution.p12 -d
          openssl aes-256-cbc -k "$CERT_PASSWORD" -in pf_ios/main_Target_ad_hoc.mobileprovision.enc -out ios/certs/main_Target_ad_hoc.mobileprovision -d
          openssl aes-256-cbc -k "$CERT_PASSWORD" -in pf_ios/ext_Target_ad_hoc.mobileprovision.enc -out ios/certs/ext_Target_ad_hoc.mobileprovision -d
      # -------------------------
      # 6️⃣ Keychain & certificate
      # -------------------------
      - name: 🔑 Create keychain and import certificate
        env:
          CERT_PASSWORD: ${{ secrets.CERT_PASSWORD }}
        run: |
          set -e
          KEYCHAIN_NAME=build.keychain
          KEYCHAIN_PASSWORD=$CERT_PASSWORD  # reuse your cert password safely
          
          # Create keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_NAME"
          
          # Prevent auto-lock during CI
          security set-keychain-settings -lut 3600 "$KEYCHAIN_NAME"
          
          # Add keychain to search list and make default
          security list-keychains -s "$KEYCHAIN_NAME"
          security default-keychain -s "$KEYCHAIN_NAME"
          
          # Unlock keychain
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_NAME"
          
          # Import certificate (.p12)
          security import ios/certs/appleDistribution.p12 \
            -k "$KEYCHAIN_NAME" \
            -P "$CERT_PASSWORD" \
            -T /usr/bin/codesign
          
          # Allow codesign to access
          security set-key-partition-list -S apple-tool:,apple: -s \
            -k "$KEYCHAIN_PASSWORD" "$KEYCHAIN_NAME"


      # -------------------------
      # 7️⃣ Install Provisioning Profiles
      # -------------------------
      - name: 📄 Install Provisioning Profiles
        run: |
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp ios/certs/main_Target_ad_hoc.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/
          cp ios/certs/ext_Target_ad_hoc.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/

          echo "Installed provisioning profiles:"
          ls -la ~/Library/MobileDevice/Provisioning\ Profiles || true
      # -------------------------
      # 8️⃣ Bundle React Native JS
      # -------------------------
      - name: 📦 Bundle React Native JS
        run: |
          npx react-native bundle \
            --entry-file index.js \
            --platform ios \
            --dev false \
            --bundle-output ios/main.jsbundle \
            --assets-dest ios
      # -------------------------
      # 9️⃣ Install xcpretty
      # -------------------------
      - name: 💎 Install xcpretty
        run: gem install xcpretty

      - name: Fix CocoaPods script permissions
        run: |
          chmod +x ios/Pods/Target\ Support\ Files/Pods-*/Pods-*-frameworks.sh
          chmod +x ios/Pods/Target\ Support\ Files/Pods-*/Pods-*-resources.sh

      # -------------------------
      # 🔟 Build & Archive iOS App
      # -------------------------
      - name: 🏗️ Build & Archive iOS App (Signed)
        env:
          APP_SCHEME: nvRNSDKLiveAccountTestApp
          WORKSPACE: nvRNSDKLiveAccountTestApp.xcworkspace
          CONFIGURATION: ad_hoc
          DEVELOPMENT_TEAM: 4JW4924F8P
          PROFILE_APP_NAME: "nvRNLiveAcTestAppMainTargetAdHocDistribProfile"
          PROFILE_EXT_NAME: "nvRNLiveAcTestAppServExtTargetAdHocDistribProfile"
        run: |
          set -e
          cd ios
          mkdir -p build

          # Fix dependency analysis
          echo "🔧 Fixing: basedOnDependencyAnalysis issue"
          find . -name "project.pbxproj" -exec sed -i '' 's/"basedOnDependencyAnalysis" = YES;/"basedOnDependencyAnalysis" = NO;/g' {} \; || true
  
          # ExportOptions.plist
          cat > ExportOptions.plist <<EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" 
            "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
            <key>method</key>
            <string>release-testing</string>
            <key>teamID</key>
            <string>4JW4924F8P</string>
            <key>signingStyle</key>
            <string>manual</string>
            <key>compileBitcode</key>
            <false/>
            <key>signingCertificate</key>
            <string>Apple Distribution</string>
            <key>stripSwiftSymbols</key>
            <true/>
            <key>destination</key>
            <string>export</string>
            <key>provisioningProfiles</key>
            <dict>
              <key>com.notifyvisitors.rn.nvrnsdkliveaccounttestapp</key>
              <string>${PROFILE_APP_NAME}</string>
              <key>com.notifyvisitors.rn.nvrnsdkliveaccounttestapp.NVRNPushServiceExt</key>
              <string>${PROFILE_EXT_NAME}</string>
            </dict>
            <key>manageAppVersionAndBuildNumber</key>
            <false/>
            <key>generateAppStoreInformation</key>
            <false/>
          </dict>
          </plist>
          EOF

          echo "===== ExportOptions.plist ====="
          cat ExportOptions.plist
          echo "==============================="
          
          # Clean previous builds
          echo "🧹 Cleaning previous build"
          xcodebuild clean -workspace "$WORKSPACE" -scheme "$APP_SCHEME" -configuration "$CONFIGURATION"
          
         
          
          # Archive
          echo "📦 Archiving app (CI optimized)"
          ARCHIVE_PATH="$PWD/build/${APP_SCHEME}.xcarchive"
          
          # Archive (Fixed per-target provisioning)
          echo "📦 Archiving app (Signed with both profiles)"
          ARCHIVE_PATH="$PWD/build/${APP_SCHEME}.xcarchive"

          # Export target-specific provisioning overrides
          export PROVISIONING_PROFILE_SPECIFIER_nvRNSDKLiveAccountTestApp="nvRNLiveAcTestAppMainTargetAdHocDistribProfile"
          export PROVISIONING_PROFILE_SPECIFIER_NVRNPushServiceExt="nvRNLiveAcTestAppServExtTargetAdHocDistribProfile"
          export CODE_SIGNING_ALLOWED=NO
          export CODE_SIGNING_REQUIRED=NO

          xcodebuild -workspace "$WORKSPACE" \
            -scheme "$APP_SCHEME" \
            -configuration "$CONFIGURATION" \
            -sdk iphoneos \
            -archivePath "$ARCHIVE_PATH" \
            DEVELOPMENT_TEAM="${DEVELOPMENT_TEAM}" \
            CODE_SIGN_STYLE=Manual \
            CODE_SIGN_IDENTITY="Apple Distribution" \
            -allowProvisioningUpdates \
            archive | xcpretty
            
          # Export signed IPA (Ad-Hoc)
          echo "Exporting .ipa (Ad-Hoc)..."
          echo "📦 Exporting .ipa..."
          set -o pipefail
          xcodebuild -exportArchive \
            -archivePath "$ARCHIVE_PATH" \
            -exportPath "$PWD/build" \
            -exportOptionsPlist ExportOptions.plist \
            -allowProvisioningUpdates \
            -allowProvisioningDeviceRegistration \
            -verbose | tee export.log
            
          echo "IPA files:"
          ls -la build/*.ipa || true
          cd ..
      # -------------------------
      # 1️⃣1️⃣ Upload IPA Artifact
      # -------------------------
      - name: ☁️ Upload iOS IPA Artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-ad_hoc-ios
          path: ios/build/*.ipa
